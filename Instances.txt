---------------------------------------------------------------------------------------------

📦 Objet - Les données concrètes
Un objet est une instance avec des valeurs réelles.

// Objet littéral
const product = {
    name: "MacBook",
    price: 2000,
    inStock: true
};

// Objet avec type explicite
const car: { brand: string; year: number } = {
    brand: "Toyota",
    year: 2023
};

---------------------------------------------------------------------------------------------

🔧 Interface - Le contrat/blueprint
Une interface définit la structure que doit avoir un objet, sans implémentation.

interface User {
    id: number;
    name: string;
    email?: string; // optionnel
    readonly createdAt: Date; // lecture seule
}

// Utilisation
const user: User = {
    id: 1,
    name: "Othmane",
    createdAt: new Date()
};

---------------------------------------------------------------------------------------------

🏗️ Classe - Le moule avec logique
Une classe définit la structure ET le comportement, peut créer des instances.

class Animal {
    private name: string; // propriété privée
    protected age: number; // accessible aux sous-classes
    public species: string; // publique

    constructor(name: string, age: number, species: string) {
        this.name = name;
        this.age = age;
        this.species = species;
    }

    // Méthode
    speak(): string {
        return `${this.name} makes a sound`;
    }

    // Propriété statique
    static kingdom = "Animalia";
}

// Création d'instance
const dog = new Animal("Rex", 3, "Dog");

---------------------------------------------------------------------------------------------

🎯 Type - Alias personnalisé
Un type crée un alias pour des types complexes
type Status = "pending" | "approved" | "rejected";
type UserProfile = {
    name: string;
    status: Status;
};

// Ou pour des unions
type ID = string | number;

---------------------------------------------------------------------------------------------

📋 Comparaison rapide
Concept     | Utilisation           | Instanciation  | Héritage
Interface   | Structure/contrat     | ❌ Non        | ✅ extends
Objet       | Données concrètes     | ✅ Direct     | ❌ Non
Classe      | Structure + logique   | ✅ new        | ✅ extends
Type        | Alias/union           | ❌ Non        | ✅ & (intersection)

---------------------------------------------------------------------------------------------

En résumé : Interface = contrat, Classe = moule avec logique, Objet = données, Type = alias !